<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/Lsystem.py;C:/Users/bakyt/PycharmProjects/pythonProject3/main.py;C:/Users/bakyt/PycharmProjects/pythonProject3/MWidgets.py;C:/Users/bakyt/PycharmProjects/pythonProject3/test.py;C:/Users/bakyt/PycharmProjects/pythonProject3/what.py;C:/Users/bakyt/PycharmProjects/pythonProject3/Window.py" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/bakyt/PycharmProjects/pythonProject3&quot;:&quot;{\&quot;/MWidgets.py\&quot;:\&quot;This file defines various custom Qt widget classes for building graphical user interfaces in Python.\\n\\nThe key classes and functions include:\\n\\n- MButton - A custom QPushButton class that allows passing a callback function.\\n\\n- MHelpwin - A custom QDialog subclass for displaying help windows. \\n\\n- Modifiedlist - A customized QListWidget with additional context menu actions.\\n\\n- MTextlistwidget, MColorlistwidget - Subclasses of Modifiedlist for text and color list widgets.\\n\\n- MColorDialog - A customized QColorDialog.\\n\\n- MDialog - A base class for custom dialogs with standard OK/Cancel buttons. \\n\\n- Settingdialog - A dialog for editing key bindings.\\n\\n- SpinboxDialog, MComboboxDialog - Simple dialogs with spinboxes/comboboxes.\\n\\n- MCanvas - A widget for drawing fractal images using a turtle graphics approach. \\n\\n- Turtle - A class that implements turtle graphics drawing on a QPainter.\\n\\nThe key purposes are to provide reusable custom widgets for building GUI applications in Python/Qt with additional functionality like callbacks, context menus, color pickers etc. It abstracts away some common dialog and widget patterns.\&quot;,\&quot;/main.py\&quot;:\&quot;This main.py file is the entry point for the application. Here\\u0027s what it does:\\n\\n1. Imports the MainWindow class from the Window.py file. This is likely the main window class for the GUI.\\n\\n2. Creates an instance of the MainWindow class and assigns it to the ui variable. This initializes the main window. \\n\\n3. Calls ui.exec() which runs the main event loop for the GUI. This keeps the application running and processes events like user input.\\n\\n4. Catches any exceptions raised during execution using a try/except block. Any exceptions are printed and re-raised.\\n\\n5. Exits the application by returning the result of ui.exec(). This cleans up resources when the main window is closed.\\n\\nKey functions:\\n\\n- MainWindow class - Defines the main window for the GUI \\n- ui.exec() - Runs the main GUI event loop\\n- Exception handling - Catches and prints any errors during execution\\n\\nSo in summary, it initializes the main window, runs the GUI event loop, and handles exceptions to launch the application\\u0027s GUI. The MainWindow class would contain the actual window layout and UI logic.\&quot;,\&quot;/what.py\&quot;:\&quot;This file defines a GUI application to visualize and interact with L-systems using turtle graphics.\\n\\nKey functions:\\n\\n- MTurtle - Defines a turtle object that can draw lines, turn, and store drawing commands. Implements the turtle graphics commands.\\n\\n- drawfracture - Takes an L-system production string and executes the turtle commands to draw the fractal.\\n\\n- getlines - Converts the stored drawing commands into QLine objects. \\n\\n- Widget - The main QWidget that displays the drawing.\\n\\n  - paintEvent - Redraws the drawing on paint events like size changes. Uses QPainter.\\n\\n  - wheelEvent - Handles mouse wheel to zoom in/out by changing line length.\\n\\n  - mousePressEvent/MoveEvent - Allows dragging the drawing by changing pixmappos.\\n\\n  - __init__ - Initializes the LSystem, MTurtle, and display pixmap.\\n\\n- LSystem - Defines the L-system grammar and production rules.\\n\\nSo in summary, it defines the turtle graphics implementation, loads an L-system, uses the turtle to draw it, and provides a widget to display and interact with the drawing. The key functions implement the turtle graphics and GUI interactivity.\&quot;,\&quot;/Window.py\&quot;:\&quot;This file defines a GUI application for generating fractal patterns using PySide6.\\n\\nKey functions:\\n\\n- __init__(): Initializes the main window and sets up the UI layout with widgets like the canvas, parameter form, rule/color lists, buttons etc.\\n\\n- start_(): Starts the fractal generation on the canvas using the current parameter values. \\n\\n- settings_win(): Opens a settings window (not implemented).\\n\\n- koh_curve(), levi_c_curve(), sierpinski_triangle(): Presets the parameters for common fractals like the Koch curve, Levi C curve and Sierpinski triangle.\\n\\n- open_file(): Opens a JSON file and loads parameter values. \\n\\n- save_algorithm(): Saves the current parameters and rules/colors to a JSON file. \\n\\n- show_help(): Opens a help window.\\n\\n- show_warning(): Displays a warning message box. \\n\\n- exec(): Starts the main event loop to display the application window.\\n\\nSo in summary, it defines a GUI for interactively generating and saving fractal patterns using predefined rules and parameters. The canvas widget actually performs the fractal drawing.\&quot;,\&quot;/test.py\&quot;:\&quot;This file contains unit tests for some widgets and classes from a GUI application.\\n\\nKey things it does:\\n\\n- Imports unittest for unit testing and QApplication for GUI testing from PySide6\\n- Imports the classes/modules being tested - LSystem, MColorlistwidget, MTextlistwidget\\n- Defines test classes that inherit from unittest.TestCase\\n- Sets up test data like lists of colors/texts\\n- Defines test methods like:\\n  - testaddtext() - adds texts and checks list matches \\n  - testtakecurrentitem() - takes items and checks order\\n  - testuserules() - generates output from LSystem rules\\n- Runs the tests with unittest.main()\\n\\nKey functions:\\n\\n- addtext() - adds text to MTextlistwidget \\n- gettextlist() - gets text list from MTextlistwidget\\n- takecurrentitem() - takes current item from list widget\\n- addcolor() - adds color to MColorlistwidget\\n- getcolorlist() - gets color list from MColorlistwidget\\n- generate_action_string() - generates output from LSystem rules\\n\\nSo in summary, it defines unit tests for the widgets and LSystem class, setting up test data and asserting the expected behavior of key methods.\&quot;,\&quot;/Lsystem.py\&quot;:\&quot;This file defines an LSystem class that represents a Lindenmayer system.\\n\\nKey functions:\\n\\n- __init__() - Initializes the LSystem with rules and keywords. Can initialize from another LSystem.\\n\\n- rules - Property to get/set the rules dictionary. Parses rules from various input formats.\\n\\n- keywords - Property to get/set the keywords list. Parses keywords from various input formats. \\n\\n- generate_action_string() - Generates the action string by applying the rules iteratively and formats the result. Stores results in a SQLite database.\\n\\n- formatting() - Formats an action string into a tuple of (character, quantity) pairs.\\n\\n- unformatting() - Converts a string or (character, quantity) tuple back to a plain string.\\n\\n- __repr__()/__str__() - Representation methods for printing the LSystem.\\n\\nMain functionality:\\n\\n- Define L-system rules and keywords\\n- Generate action strings by iteratively applying rules\\n- Format/unformat strings for storage and parsing of results\\n- Store generation results in a SQLite database\\n\\nSo in summary, it provides the core functionality for defining, generating, and working with L-system strings. The database integration allows storing and retrieving generation results.\&quot;}&quot;}" />
  </component>
</project>